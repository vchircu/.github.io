<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	
	xmlns:georss="http://www.georss.org/georss"
	xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
	>

<channel>
	<title>Saga &#8211; Simple Oriented Architecture</title>
	<atom:link href="/tag/saga/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description></description>
	<lastBuildDate>Fri, 08 Nov 2024 10:14:16 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.6.2</generator>
<site xmlns="com-wordpress:feed-additions:1">108420443</site>	<item>
		<title>Handling Failure in Long Running Processes</title>
		<link>/handling-failure-in-long-running-processes/</link>
		
		<dc:creator><![CDATA[Victor Chircu]]></dc:creator>
		<pubDate>Sat, 13 Jul 2019 09:41:39 +0000</pubDate>
				<category><![CDATA[Architecture]]></category>
		<category><![CDATA[NServiceBus]]></category>
		<category><![CDATA[dead letter channel]]></category>
		<category><![CDATA[idempotent receiver]]></category>
		<category><![CDATA[integration]]></category>
		<category><![CDATA[long running process]]></category>
		<category><![CDATA[messaging]]></category>
		<category><![CDATA[microservices]]></category>
		<category><![CDATA[retries]]></category>
		<category><![CDATA[Saga]]></category>
		<category><![CDATA[soa]]></category>
		<guid isPermaLink="false">/?p=1116</guid>

					<description><![CDATA[In the previous posts in this series, weâ€™ve seen some examples of long running processes, how to model them and <a class="more-link" href="/handling-failure-in-long-running-processes/">Continue Reading</a>]]></description>
		
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">1116</post-id>	</item>
		<item>
		<title>Saga concurrency and coarse-grained locks when using NHibernate Persistence</title>
		<link>/saga-concurrency-coarse-grained-locks-nhibernate/</link>
		
		<dc:creator><![CDATA[Victor Chircu]]></dc:creator>
		<pubDate>Sun, 14 Aug 2016 12:46:49 +0000</pubDate>
				<category><![CDATA[NServiceBus]]></category>
		<category><![CDATA[aggregate]]></category>
		<category><![CDATA[concurrency]]></category>
		<category><![CDATA[ddd]]></category>
		<category><![CDATA[NHibernate]]></category>
		<category><![CDATA[Saga]]></category>
		<guid isPermaLink="false">/?p=295</guid>

					<description><![CDATA[Recently, I stumbled upon an interesting problem related to NServiceBus Saga concurrency and coarse-grained locks when using NHibernate Persistence. With <a class="more-link" href="/saga-concurrency-coarse-grained-locks-nhibernate/">Continue Reading</a>]]></description>
		
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">295</post-id>	</item>
	</channel>
</rss>
